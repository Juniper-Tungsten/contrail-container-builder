# Configs section
# Note: using ".." for ports, because in v1 there is a bug
# which leads to an error
# "..rror unmarshaling JSON: json: cannot unmarshal number into Go value of type string.."
# (https://github.com/kubernetes/kubernetes/issues/2763)
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: env
  namespace: kube-system
data:
  AAA_MODE: {{ aaa_mode }}
  ANALYTICS_API_VIP: {{ analytics_api_vip }}
  ANALYTICS_NODES: {{ analytics_nodes }}
  ANALYTICSDB_NODES: {{ analyticsdb_nodes }}
  AUTH_MODE: {{ auth_mode }}
  CLOUD_ORCHESTRATOR: {{ cloud_orchestrator }}
  CONFIG_API_VIP: {{ config_api_vip }}
  CONFIG_NODES: {{ config_nodes }}
  CONFIGDB_NODES: {{ configdb_nodes }}
  CONTROL_NODES: {{ control_nodes }}
  CONTROLLER_NODES: {{ controller_nodes }}
  KAFKA_NODES: {{ kafka_nodes }}
  LOG_LEVEL: {{ log_level }}
  METADATA_PROXY_SECRET: {{ metadata_proxy_secret }}
  PHYSICAL_INTERFACE: {{ physical_interface }}
  RABBITMQ_NODES: {{ rabbitmq_nodes }}
  RABBITMQ_NODE_PORT: "{{ rabbitmq_node_port }}"
  REDIS_NODES: {{ redis_nodes }}
  VROUTER_GATEWAY: {{ vrouter_gateway }}
  WEBUI_NODES: {{ webui_nodes }}
  WEBUI_VIP: {{ webui_vip }}
  ZOOKEEPER_ANALYTICS_PORT: "{{ zookeeper_analytics_port }}"
  ZOOKEEPER_NODES: {{ zookeeper_nodes }}
  ZOOKEEPER_PORT: "{{ zookeeper_port }}"
  ZOOKEEPER_PORTS: {{ zookeeper_ports }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nodemgr-config
  namespace: kube-system
data:
  DOCKER_HOST: "unix://mnt/docker.sock"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: contrail-analyticsdb-config
  namespace: kube-system
data:
  CASSANDRA_SEEDS: {{ analyticsdb_nodes }}
  CASSANDRA_CLUSTER_NAME: Contrail
  CASSANDRA_START_RPC: "true"
  CASSANDRA_LISTEN_ADDRESS: auto
  CASSANDRA_PORT: "9160"
  CASSANDRA_CQL_PORT: "9042"
  CASSANDRA_SSL_STORAGE_PORT: "7001"
  CASSANDRA_STORAGE_PORT: "7000"
  CASSANDRA_JMX_LOCAL_PORT: "7200"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: contrail-configdb-config
  namespace: kube-system
data:
  CASSANDRA_SEEDS: {{ configdb_nodes }}
  CASSANDRA_CLUSTER_NAME: ContrailConfigDB
  CASSANDRA_START_RPC: "true"
  CASSANDRA_LISTEN_ADDRESS: auto
  CASSANDRA_PORT: "9161"
  CASSANDRA_CQL_PORT: "9041"
  CASSANDRA_SSL_STORAGE_PORT: "7011"
  CASSANDRA_STORAGE_PORT: "7010"
  CASSANDRA_JMX_LOCAL_PORT: "7201"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-manager-config
  namespace: kube-system
data:
  KUBERNETES_API_SERVER: {{ kubernetes_api_server }}
  K8S_TOKEN_FILE: "/tmp/serviceaccount/token"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq-config
  namespace: kube-system
data:
  RABBITMQ_ERLANG_COOKIE: "47EFF3BB-4786-46E0-A5BB-58455B3C2CB4"

# Starter entrypoint scripts
# These scripts adds functionality which in fact should've been provided by the containers - some of the features like
# clustering or multi-cards are not correctly supported by them currently. When these features are supported this starter
# scripts will become unnecessary.
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: contrail-cassandra-starter
  namespace: kube-system
data:
  contrail-entrypoint.sh: |-
    #!/bin/bash

    IFS=',' read -ra srv_list <<< "$CASSANDRA_SEEDS"
    local_ips=$(ip addr | awk '/inet/ {print($2)}')
    for srv in "${srv_list[@]}"; do
      if [[ "$local_ips" =~ "$srv" ]] ; then
        echo "INFO: found '$srv' in local IPs '$local_ips'"
        my_ip=$srv
        break
      fi
    done

    if [ -z "$my_ip" ]; then
      echo "ERROR: Cannot find self ips ('$local_ips') in Cassandra nodes ('$CASSANDRA_SEEDS')"
      exit
    fi

    # use first two servers as seeds
    export CASSANDRA_SEEDS=$(echo $CASSANDRA_SEEDS | cut -d ',' -f 1,2)
    export CASSANDRA_LISTEN_ADDRESS=$my_ip

    export JVM_EXTRA_OPTS="-Dcassandra.rpc_port=${CASSANDRA_PORT:-9160} \
      -Dcassandra.native_transport_port=${CASSANDRA_CQL_PORT:-9042} \
      -Dcassandra.ssl_storage_port=${CASSANDRA_SSL_STORAGE_PORT:-7011} \
      -Dcassandra.storage_port=${CASSANDRA_STORAGE_PORT:-7010} \
      -Dcassandra.jmx.local.port=${CASSANDRA_JMX_LOCAL_PORT:-7200} \
      -Xms1g -Xmx2g"

    echo "INFO: CASSANDRA_SEEDS=$CASSANDRA_SEEDS CASSANDRA_LISTEN_ADDRESS=$CASSANDRA_LISTEN_ADDRESS"
    echo "INFO: exec /docker-entrypoint.sh $@"

    exec /docker-entrypoint.sh "$@"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: contrail-zookeeper-starter
  namespace: kube-system
data:
  contrail-entrypoint.sh: |-
    #!/bin/bash

    ord=1
    my_ord=0
    IFS=',' read -ra srv_list <<< "$ZOOKEEPER_NODES"
    local_ips=$(ip addr | awk '/inet/ {print($2)}')
    ZOOKEEPER_PORTS=${ZOOKEEPER_PORTS:-'2888:3888'}
    zoo_servers=''
    for srv in "${srv_list[@]}"; do
      if [[ -z "$ZOO_SERVERS" ]] ; then
        zoo_servers+="server.${ord}=${srv}:${ZOOKEEPER_PORTS} "
      fi
      if [[ "$local_ips" =~ "$srv" ]] ; then
        echo "INFO: found '$srv' in local IPs '$local_ips'"
        my_ord=$ord
      fi
      ord=$((ord+1))
    done

    if (( $my_ord < 1 || $my_ord > "${#srv_list[@]}" )); then
      echo "ERROR: Cannot find self ips ('$local_ips') in Zookeeper nodes ('$ZOOKEEPER_NODES')"
      exit
    fi

    # If ZOO_SERVERS is provided then just use it, because it is an interface of
    # the inherited zookeeper container, else define it in case if
    # custome zookeeper ports are provided.
    if [[ "$zoo_servers" != '' ]] ; then
      export ZOO_SERVERS=${zoo_servers::-1}
    fi

    export ZOO_PORT=${ZOOKEEPER_PORT}
    export ZOO_MY_ID=$my_ord

    echo "INFO: ZOO_MY_ID=$ZOO_MY_ID, ZOO_PORT=$ZOO_PORT"
    echo "INFO: ZOO_SERVERS=$ZOO_SERVERS"
    echo "INFO: /docker-entrypoint.sh $@"

    exec /docker-entrypoint.sh "$@"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: contrail-rabbitmq-starter
  namespace: kube-system
data:
  contrail-entrypoint.sh: |-
    #!/bin/bash -e

    cluster_nodes='{['
    local_ips=$(cat "/proc/net/fib_trie" | awk '/32 host/ { print f } {f=$2}')
    IFS=',' read -ra server_list <<< "${RABBITMQ_NODES}"
    my_ip=''
    my_node=''
    rabbit_node_list=''
    for server in ${server_list[@]}; do
      server_hostname=''
      if getent hosts $server ; then
        server_hostname=$(getent hosts $server | awk '{print $2}' | awk -F '.' '{print $1}')
      else
        if host -4 $server ; then
          server_hostname=$(host -4 $server | cut -d" " -f5 | awk '{print $1}')
          server_hostname=${server_hostname::-1}
        fi
      fi
      if [[ "$server_hostname" == '' ]] ; then
        echo "WARNING: hostname for $server is not resolved properly, cluster setup will not be functional."
      fi
      cluster_nodes+="'contrail@${server_hostname}',"
      if [[ "$local_ips" =~ "$server" ]] ; then
        my_ip=$server
        my_node=$server_hostname
        echo "INFO: my_ip=$server my_node=$server_hostname"
      fi
    done

    cluster_nodes=${cluster_nodes::-1}'],disc}'
    if [ -z "$my_ip" ] ; then
      echo "ERROR: Cannot find self ips ('$local_ips') in RabbitMQ nodes ('$RABBITMQ_NODES')"
      exit
    fi

    export RABBITMQ_NODENAME=contrail@$my_node
    if [[ "$RABBITMQ_NODE_PORT" != '' ]] ; then
      export RABBITMQ_NODE_PORT=${RABBITMQ_NODE_PORT}
    fi
    if (( ${#server_list[@]} > 1 )); then
      export RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS="-rabbit cluster_nodes $cluster_nodes"
    fi

    echo "INFO: RABBITMQ_NODENAME=$RABBITMQ_NODENAME, RABBITMQ_NODE_PORT=$RABBITMQ_NODE_PORT"
    echo "INFO: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=$RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS"
    echo "INFO: /docker-entrypoint.sh $@"

    exec /docker-entrypoint.sh "$@"
# Containers section
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: zookeeper
  namespace: kube-system
  labels:
    app: zookeeper
spec:
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/zookeeper"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: zookeeper
        image: "zookeeper:3.4.10"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        command: ["/bin/bash", "/opt/contrail/contrail-entrypoint.sh", "zkServer.sh", "start-foreground"]
        volumeMounts:
        - mountPath: /var/lib/zookeeper
          name: zookeeper-data
        - mountPath: /var/log/zookeeper
          name: zookeeper-logs
        - mountPath: /opt/contrail
          name: contrail-zookeeper-starter
      volumes:
      - name: zookeeper-data
        hostPath:
          path: /var/lib/contrail/zookeeper
      - name: zookeeper-logs
        hostPath:
          path: /var/log/contrail/zookeeper
      - name: contrail-zookeeper-starter
        configMap:
          name: contrail-zookeeper-starter
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: kafka
  namespace: kube-system
  labels:
    app: kafka
spec:
  template:
    metadata:
      labels:
        app: kafka
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/kafka"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: kafka
        image: "{{registry}}/contrail-external-kafka:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /tmp/kafka-logs
          name: kafka-logs
      volumes:
      - name: kafka-logs
        hostPath:
          path: /var/lib/contrail/kafka-logs
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-analyticsdb
  namespace: kube-system
  labels:
    app: contrail-analyticsdb
spec:
  template:
    metadata:
      labels:
        app: contrail-analyticsdb
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/analyticsdb"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: contrail-analyticsdb
        image: "cassandra:3.11.1"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: contrail-analyticsdb-config
        command: ["/bin/bash", "/opt/contrail/contrail-entrypoint.sh", "cassandra", "-f"]
        volumeMounts:
        - mountPath: /var/lib/cassandra
          name: analyticsdb-data
        - mountPath: /var/log/cassandra
          name: analyticsdb-log
        - mountPath: /opt/contrail
          name: contrail-cassandra-starter
      volumes:
      - name: analyticsdb-data
        hostPath:
          path: /var/lib/contrail/analyticsdb
      - name: analyticsdb-log
        hostPath:
          path: /var/log/contrail/analyticsdb
      - name: contrail-cassandra-starter
        configMap:
          name: contrail-cassandra-starter
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-configdb
  namespace: kube-system
  labels:
    app: contrail-configdb
spec:
  template:
    metadata:
      labels:
        app: contrail-configdb
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/configdb"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: contrail-configdb
        image: "cassandra:3.11.1"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: contrail-configdb-config
        command: ["/bin/bash", "/opt/contrail/contrail-entrypoint.sh", "cassandra", "-f"]
        volumeMounts:
        - mountPath: /var/lib/cassandra
          name: configdb-data
        - mountPath: /var/log/cassandra
          name: configdb-log
        - mountPath: /opt/contrail
          name: contrail-cassandra-starter
      volumes:
      - name: configdb-data
        hostPath:
          path: /var/lib/contrail/configdb
      - name: configdb-log
        hostPath:
          path: /var/log/contrail/configdb
      - name: contrail-cassandra-starter
        configMap:
          name: contrail-cassandra-starter
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-analytics
  namespace: kube-system
  labels:
    app: contrail-analytics
spec:
  template:
    metadata:
      labels:
        app: contrail-analytics
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/analytics"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: contrail-analytics-api
        image: "{{registry}}/contrail-analytics-api:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /var/log/contrail
          name: analytics-logs
      - name: contrail-analytics-collector
        image: "{{registry}}/contrail-analytics-collector:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /var/log/contrail
          name: analytics-logs
      - name: contrail-analytics-alarm-gen
        image: "{{registry}}/contrail-analytics-alarm-gen:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /var/log/contrail
          name: analytics-logs
      - name: contrail-analytics-query-engine
        image: "{{registry}}/contrail-analytics-query-engine:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /var/log/contrail
          name: analytics-logs
      - name: contrail-analytics-snmp-collector
        image: "{{registry}}/contrail-analytics-snmp-collector:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /var/log/contrail
          name: analytics-logs
      - name: contrail-analytics-topology
        image: "{{registry}}/contrail-analytics-topology:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /var/log/contrail
          name: analytics-logs
      - name: contrail-analytics-nodemgr
        image: "{{registry}}/contrail-nodemgr:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: nodemgr-config
        env:
        - name: NODE_TYPE
          value: analytics
# todo: there is type Socket in new kubernetes, it is possible to use full
# path:
# hostPath:
#   path: /var/run/docker.sock and
#   type: Socket
        volumeMounts:
        - mountPath: /var/log/contrail
          name: analytics-logs
        - mountPath: /mnt
          name: docker-unix-socket
      volumes:
      - name: analytics-logs
        hostPath:
          path: /var/log/contrail/analytics
      - name: docker-unix-socket
        hostPath:
          path: /var/run
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-controller-control
  namespace: kube-system
  labels:
    app: contrail-controller-control
spec:
  template:
    metadata:
      labels:
        app: contrail-controller-control
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/control"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: contrail-controller-control
        image: "{{registry}}/contrail-controller-control-control:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /var/log/contrail
          name: control-logs
      - name: contrail-controller-control-dns
        image: "{{registry}}/contrail-controller-control-dns:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /etc/contrail
          name: dns-config
        - mountPath: /var/log/contrail
          name: control-logs
      - name: contrail-controller-control-named
        image: "{{registry}}/contrail-controller-control-named:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /etc/contrail
          name: dns-config
        - mountPath: /var/log/contrail
          name: control-logs
      - name: contrail-controller-nodemgr
        image: "{{registry}}/contrail-nodemgr:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: nodemgr-config
        env:
        - name: NODE_TYPE
          value: control
# todo: there is type Socket in new kubernetes, it is possible to use full
# path:
# hostPath:
#   path: /var/run/docker.sock and
#   type: Socket
        volumeMounts:
        - mountPath: /var/log/contrail
          name: control-logs
        - mountPath: /mnt
          name: docker-unix-socket
      volumes:
      - name: control-logs
        hostPath:
          path: /var/log/contrail/control
      - name: docker-unix-socket
        hostPath:
          path: /var/run
      - name: dns-config
        emptyDir: {}
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-controller-config
  namespace: kube-system
  labels:
    app: contrail-controller-config
spec:
  template:
    metadata:
      labels:
        app: contrail-controller-config
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/config"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: contrail-controller-config-api
        image: "{{registry}}/contrail-controller-config-api:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /var/log/contrail
          name: config-logs
      - name: contrail-controller-config-devicemgr
        image: "{{registry}}/contrail-controller-config-devicemgr:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /var/log/contrail
          name: config-logs
      - name: contrail-controller-config-schema
        image: "{{registry}}/contrail-controller-config-schema:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /var/log/contrail
          name: config-logs
      - name: contrail-controller-config-svcmonitor
        image: "{{registry}}/contrail-controller-config-svcmonitor:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /var/log/contrail
          name: config-logs
      - name: contrail-controller-config-nodemgr
        image: "{{registry}}/contrail-nodemgr:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: nodemgr-config
        env:
        - name: NODE_TYPE
          value: config
# todo: there is type Socket in new kubernetes, it is possible to use full
# path:
# hostPath:
#   path: /var/run/docker.sock and
#   type: Socket
        volumeMounts:
        - mountPath: /var/log/contrail
          name: config-logs
        - mountPath: /mnt
          name: docker-unix-socket
      volumes:
      - name: config-logs
        hostPath:
          path: /var/log/contrail/config
      - name: docker-unix-socket
        hostPath:
          path: /var/run
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-controller-webui
  namespace: kube-system
  labels:
    app: contrail-controller-webui
spec:
  template:
    metadata:
      labels:
        app: contrail-controller-webui
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/webui"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: contrail-controller-webui-job
        image: "{{registry}}/contrail-controller-webui-job:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /var/log/contrail
          name: webui-logs
      - name: contrail-controller-webui-web
        image: "{{registry}}/contrail-controller-webui-web:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /var/log/contrail
          name: webui-logs
      volumes:
      - name: webui-logs
        hostPath:
          path: /var/log/contrail/webui
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: redis
  namespace: kube-system
  labels:
    app: redis
spec:
  template:
    metadata:
      labels:
        app: redis
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/analytics"
                operator: Exists
            - matchExpressions:
              - key: "node-role.opencontrail.org/webui"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: redis
        image: "redis:4.0.2"
        imagePullPolicy: ""
        volumeMounts:
        - mountPath: /var/lib/redis
          name: redis-data
        - mountPath: /var/log/redis
          name: redis-logs
      volumes:
      - name: redis-data
        hostPath:
          path: /var/lib/contrail/redis
      - name: redis-logs
        hostPath:
          path: /var/log/contrail/redis
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: rabbitmq
  namespace: kube-system
  labels:
    app: rabbitmq
spec:
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/rabbitmq"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      hostNetwork: true
      containers:
      - name: rabbitmq
        image: "rabbitmq:3.6.10"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: rabbitmq-config
        command: ["/bin/bash", "/opt/contrail/contrail-entrypoint.sh", "rabbitmq-server"]
        volumeMounts:
        - mountPath: /var/lib/rabbitmq
          name: rabbitmq-data
        - mountPath: /var/log/rabbitmq
          name: rabbitmq-logs
        - mountPath: /opt/contrail
          name: contrail-rabbitmq-starter
      volumes:
      - name: rabbitmq-data
        hostPath:
          path: /var/lib/contrail/rabbitmq
      - name: rabbitmq-logs
        hostPath:
          path: /var/log/contrail/rabbitmq
      - name: contrail-rabbitmq-starter
        configMap:
          name: contrail-rabbitmq-starter
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-kube-manager
  namespace: kube-system
  labels:
    app: contrail-kube-manager
spec:
  template:
    metadata:
      labels:
        app: contrail-kube-manager
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.kubernetes.io/master"
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      automountServiceAccountToken: false
      hostNetwork: true
      containers:
      - name: contrail-kube-manager
        image: "{{registry}}/contrail-kubernetes-kube-manager:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: kube-manager-config
        volumeMounts:
        - mountPath: /var/log/contrail
          name: kube-manager-logs
        - mountPath: /tmp/serviceaccount
          name: pod-secret
      volumes:
      - name: kube-manager-logs
        hostPath:
          path: /var/log/contrail/kube-manager
      - name: pod-secret
        secret:
          secretName: contrail-kube-manager-token
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: contrail-agent
  namespace: kube-system
  labels:
    app: contrail-agent
spec:
  template:
    metadata:
      labels:
        app: contrail-agent
    spec:
      #Disable affinity for single node setup
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-role.opencontrail.org/agent"
                operator: Exists
      #Enable tolerations for single node setup
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      automountServiceAccountToken: false
      hostNetwork: true
      initContainers:
      - name: contrail-agent-vrouter-init-kernel
        image: "{{registry}}/contrail-agent-vrouter-init-kernel:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        securityContext:
          privileged: true
        envFrom:
        - configMapRef:
            name: env
      - name: contrail-kubernetes-vrouter-init
        image: "{{registry}}/contrail-kubernetes-vrouter-init:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /var/lib/contrail
          name: var-lib-contrail
        - mountPath: /host/etc_cni
          name: etc-cni
        - mountPath: /host/opt_cni_bin
          name: opt-cni-bin
        - mountPath: /host/log_cni
          name: var-log-contrail-cni
        - mountPath: /var/log/contrail
          name: agent-logs
      containers:
      - name: contrail-agent
        image: "{{registry}}/contrail-agent-vrouter:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        # TODO: Priveleged mode is requied because w/o it the device /dev/net/tun
        # is not present in the container. The mounting it into container
        # doesnt help because of permissions are not enough syscalls,
        # e.g. https://github.com/Juniper/contrail-controller/blob/master/src/vnsw/agent/contrail/linux/pkt0_interface.cc: 48.
        securityContext:
          privileged: true
        envFrom:
        - configMapRef:
            name: env
        volumeMounts:
        - mountPath: /var/log/contrail
          name: agent-logs
        - mountPath: /usr/src
          name: usr-src
        - mountPath: /lib/modules
          name: lib-modules
        - mountPath: /var/lib/contrail
          name: var-lib-contrail
        - mountPath: /var/crashes
          name: var-crashes
        - mountPath: /tmp/serviceaccount
          name: pod-secret
      - name: contrail-agent-nodemgr
        image: "{{registry}}/contrail-nodemgr:{{version}}-{{os_version}}"
        imagePullPolicy: ""
        envFrom:
        - configMapRef:
            name: env
        - configMapRef:
            name: nodemgr-config
        env:
        - name: NODE_TYPE
          value: vrouter
# todo: there is type Socket in new kubernetes, it is possible to use full
# path:
# hostPath:
#   path: /var/run/docker.sock and
#   type: Socket
        volumeMounts:
        - mountPath: /var/log/contrail
          name: agent-logs
        - mountPath: /mnt
          name: docker-unix-socket
      volumes:
      - name: docker-unix-socket
        hostPath:
          path: /var/run
      - name: pod-secret
        secret:
          secretName: contrail-kube-manager-token
      - name: usr-src
        hostPath:
          path: /usr/src
      - name: lib-modules
        hostPath:
          path: /lib/modules
      - name: var-lib-contrail
        hostPath:
          path: /var/lib/contrail
      - name: var-crashes
        hostPath:
          path: /var/contrail/crashes
      - name: etc-cni
        hostPath:
          path: /etc/cni
      - name: opt-cni-bin
        hostPath:
          path: /opt/cni/bin
      - name: var-log-contrail-cni
        hostPath:
          path: /var/log/contrail/cni
      - name: agent-logs
        hostPath:
          path: /var/log/contrail/agent

# Meta information section
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: contrail-kube-manager
  namespace: kube-system
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: contrail-kube-manager
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: contrail-kube-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: contrail-kube-manager
subjects:
- kind: ServiceAccount
  name: contrail-kube-manager
  namespace: kube-system
---
apiVersion: v1
kind: Secret
metadata:
  name: contrail-kube-manager-token
  namespace: kube-system
  annotations:
    kubernetes.io/service-account.name: contrail-kube-manager
type: kubernetes.io/service-account-token

